// Copyright (2019) Cobalt Speech and Language Inc.

syntax = "proto3";

package cobaltspeech.luna;

option go_package = "lunapb";

// Service that implements the Cobalt Luna Text-to-Speech API
service Luna {

  // Queries the Version of the Server.
  rpc Version (VersionRequest) returns (VersionResponse);

  // Retrieves a list of available text-to-speech voices.
  rpc ListVoices (ListVoicesRequest) returns (ListVoicesResponse);

  // Performs synchronous text-to-speech generation.
  rpc Synthesize (SynthesizeRequest) returns (SynthesizeResponse);

  // Performs streaming text-to-speech generation, where the synthesized
  // speech is streamed to the client as it is being generated.
  rpc SynthesizeStream (SynthesizeRequest) returns (stream SynthesizeResponse);
}

// The top-level message sent by the client for the `Version` method.
message VersionRequest {}

// The top-level message sent by the client for the `ListVoices` method.
message ListVoicesRequest {}

// The top-level message sent by the client for the `Synthesize` and
// `SynthesizeStream` methods.
message SynthesizeRequest {
  // Provides configuration for the text-to-speech engine.
  SynthesizerConfig config = 1;

  // The text to generate speech for.
  string text = 2;
}

// Configuration for setting up the text-to-speech engine.
message SynthesizerConfig {
  string voice_id = 1;

  // Supported audio encodings. Unless otherwise noted, the sample rate is
  // defined by the voice model.
  enum AudioEncoding {
    // Raw (headerless) uncompressed 16-bit signed little endian samples (linear
    // PCM), single channel.
    RAW_LINEAR16 = 0;

    // Raw (headerless) uncompressed 32-bit floating-point little endian samples
    // (PCM), single channel.
    RAW_FLOAT32 = 1;
  }

  // Encoding of the synthesized speech. If not specified, defaults to
  // RAW_FLOAT32.
  AudioEncoding encoding = 2;

  // Optional field for streaming synthesis. If not zero, waits until
  // n_samples are generated before sending the audio data to the client.
  // In the case that the entire generated audio is less than n_samples,
  // the samples will be returned when synthesis is complete.
  uint64 n_samples = 3;
}

// The message sent by the server for the `Version` method.
message VersionResponse {
  string version = 1;
}

// The message sent by the server for the `ListVoices` method.
message ListVoicesResponse {
  // List of voices available for use that match the request.
  repeated Voice voices = 1;
}

// Description of a Luna Voice
message Voice {
  // Unique identifier of the voice.  This identifier is used to choose the
  // voice during a synthesis request, and is specified in the
  // `SynthesizerConfig` message.
  string id = 1;

  // Name of the voice.  This is a concise name describing the voice, and maybe
  // presented to the end-user, for example, to help which voice to choose for
  // their TTS task.
  string name = 2;

  // The sample rate of this voice, returned in Hertz.
  uint32 sample_rate = 3;

  // The language code for this voice.
  string language = 4;
}

// The message returned to the client by the `Synthesize` and
// `SynthesizeStream` methods.
message SynthesizeResponse {
  // Audio samples of the generated speech. The samples will have the encoding
  // specified in the SynthesizerConfig.AudioEncoding field of the request.
  bytes audio = 1;
}
