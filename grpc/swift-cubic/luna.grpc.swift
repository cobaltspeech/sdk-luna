//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: luna.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service that implements the Cobalt Luna Text-to-Speech API
///
/// Usage: instantiate `Cobaltspeech_Luna_LunaClient`, then call methods of this protocol to make API calls.
public protocol Cobaltspeech_Luna_LunaClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cobaltspeech_Luna_LunaClientInterceptorFactoryProtocol? { get }

  func version(
    _ request: Cobaltspeech_Luna_VersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Luna_VersionRequest, Cobaltspeech_Luna_VersionResponse>

  func listVoices(
    _ request: Cobaltspeech_Luna_ListVoicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Luna_ListVoicesRequest, Cobaltspeech_Luna_ListVoicesResponse>

  func synthesize(
    _ request: Cobaltspeech_Luna_SynthesizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse>

  func synthesizeStream(
    _ request: Cobaltspeech_Luna_SynthesizeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Cobaltspeech_Luna_SynthesizeResponse) -> Void
  ) -> ServerStreamingCall<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse>
}

extension Cobaltspeech_Luna_LunaClientProtocol {
  public var serviceName: String {
    return "cobaltspeech.luna.Luna"
  }

  /// Queries the Version of the Server.
  ///
  /// - Parameters:
  ///   - request: Request to send to Version.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func version(
    _ request: Cobaltspeech_Luna_VersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Luna_VersionRequest, Cobaltspeech_Luna_VersionResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.luna.Luna/Version",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionInterceptors() ?? []
    )
  }

  /// Retrieves a list of available text-to-speech voices.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVoices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listVoices(
    _ request: Cobaltspeech_Luna_ListVoicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Luna_ListVoicesRequest, Cobaltspeech_Luna_ListVoicesResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.luna.Luna/ListVoices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVoicesInterceptors() ?? []
    )
  }

  /// Performs synchronous text-to-speech generation.
  ///
  /// - Parameters:
  ///   - request: Request to send to Synthesize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func synthesize(
    _ request: Cobaltspeech_Luna_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse> {
    return self.makeUnaryCall(
      path: "/cobaltspeech.luna.Luna/Synthesize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeInterceptors() ?? []
    )
  }

  /// Performs streaming text-to-speech generation, where the synthesized
  /// speech is streamed to the client as it is being generated.
  ///
  /// - Parameters:
  ///   - request: Request to send to SynthesizeStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func synthesizeStream(
    _ request: Cobaltspeech_Luna_SynthesizeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Cobaltspeech_Luna_SynthesizeResponse) -> Void
  ) -> ServerStreamingCall<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse> {
    return self.makeServerStreamingCall(
      path: "/cobaltspeech.luna.Luna/SynthesizeStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Cobaltspeech_Luna_LunaClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'version'.
  func makeVersionInterceptors() -> [ClientInterceptor<Cobaltspeech_Luna_VersionRequest, Cobaltspeech_Luna_VersionResponse>]

  /// - Returns: Interceptors to use when invoking 'listVoices'.
  func makeListVoicesInterceptors() -> [ClientInterceptor<Cobaltspeech_Luna_ListVoicesRequest, Cobaltspeech_Luna_ListVoicesResponse>]

  /// - Returns: Interceptors to use when invoking 'synthesize'.
  func makeSynthesizeInterceptors() -> [ClientInterceptor<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse>]

  /// - Returns: Interceptors to use when invoking 'synthesizeStream'.
  func makeSynthesizeStreamInterceptors() -> [ClientInterceptor<Cobaltspeech_Luna_SynthesizeRequest, Cobaltspeech_Luna_SynthesizeResponse>]
}

public final class Cobaltspeech_Luna_LunaClient: Cobaltspeech_Luna_LunaClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cobaltspeech_Luna_LunaClientInterceptorFactoryProtocol?

  /// Creates a client for the cobaltspeech.luna.Luna service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cobaltspeech_Luna_LunaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

