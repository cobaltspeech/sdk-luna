// Copyright (2019) Cobalt Speech and Language, Inc.

#ifndef LUNA_SYNTHESIZER_STREAM_H
#define LUNA_SYNTHESIZER_STREAM_H

#include <memory>

#include "luna.grpc.pb.h"

//! The LunaSynthesizerStream class represents a stream of audio
//! generated by the Luna server in response to a synthesis request.
//! Instead of waiting for synthesis to complete and returning all the
//! audio at once, this class receives the audio samples as they are
//! ready.
class LunaSynthesizerStream
{
public:
    using LunaReader = std::shared_ptr<grpc::ClientReaderInterface<cobaltspeech::luna::SynthesizeResponse>>;

    //! Create a new synthesizer stream. Most users of this class should
    //! not need to call this constructor. Instead, they should use
    //! LunaClient::synthesizeStream().
    LunaSynthesizerStream(const LunaReader &reader,
                          const std::shared_ptr<grpc::ClientContext> &ctx);
    ~LunaSynthesizerStream();

    //! Receive audio samples from the server as they become available.
    //! Returns false when synthesis is complete and there are no more
    //! samples to receive.
    bool receiveSamples(std::vector<float> &samples);

    //! Close the synthesis stream. This should be done after all the
    //! samples have been received (i.e., recieveSamples() returned false).
    void close();

private:
    LunaReader mReader;
    std::shared_ptr<grpc::ClientContext> mCtx;
};

#endif // LUNA_SYNTHESIZER_STREAM_H
