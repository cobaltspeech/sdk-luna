// Copyright (2019) Cobalt Speech and Language, Inc.

#ifndef LUNA_CLIENT_H
#define LUNA_CLIENT_H

#include "luna.grpc.pb.h"
#include "luna_synthesizer_stream.h"
#include "luna_voice.h"

#include <memory>
#include <string>
#include <vector>

//! LunaClient represents a single client connection to a running
//! Luna server instance.
class LunaClient
{
public:
    //! Create a new client that is connected to a Luna server instance
    //! running at the given url. The url should include the port number.
    //! If secureConnection is true, the client will use TLS/SSL to
    //! communicate with the server. Otherwise the connection is insecure.
    //! Note that the server must also be running with TLS/SSL for the
    //! secure connection to succeed.
    LunaClient(const std::string &url, bool secureConnection);
    ~LunaClient();

    //! Returns the version of Luna used by the server.
    const std::string &lunaVersion();

    //! Returns a list of Luna TTS voice models that the server is currently
    //! configured to use.
    std::vector<LunaVoice> listVoices();

    //! Run batch synthesis using the given config and text. Returns
    //! the raw audio samples.
    ByteVector synthesize(const cobaltspeech::luna::SynthesizerConfig &config,
                          const std::string &text);

    //! Run voice synthesis using the given config and text. Returns a
    //! stream that receives audio samples as they are generated by
    //! the server.
    LunaSynthesizerStream
    synthesizeStream(const cobaltspeech::luna::SynthesizerConfig &config,
                     const std::string &text);

    //! Set the timeout for requests to the server.
    void setRequestTimeout(unsigned int milliseconds);

private:
    std::unique_ptr<cobaltspeech::luna::Luna::Stub> mStub;
    std::string mLunaVersion;
    std::vector<LunaVoice> mVoices;
    unsigned int mTimeout;

    // Disable copy construction and assignments. Given the nature of the
    // client, it's a bad idea to try to copy an existing connection.
    LunaClient(const LunaClient &other);
    LunaClient &operator=(const LunaClient &other);

    // Convenience functions
    void setContextDeadline(grpc::ClientContext &ctx);
};

#endif // LUNA_CLIENT_H
